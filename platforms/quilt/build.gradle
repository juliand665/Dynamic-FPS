import me.modmuss50.mpp.ReleaseType
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id("dynamic_fps.module")
	alias(libs.plugins.shadow)
	alias(libs.plugins.mod.publish.plugin)
}

repositories {
	maven { url = "https://maven.quiltmc.org/repository/release" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":platforms:common").loom.accessWidenerPath
}

configurations {
	common {
		canBeResolved = true
		canBeConsumed = false
	}
	// Files in this configuration will be bundled into your mod using the Shadow plugin.
	// Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
	shadowBundle {
		canBeResolved = true
		canBeConsumed = false
	}
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
    modImplementation(libs.quilt.loader)

	include(libs.battery)

	common(project(path: ":platforms:common", configuration: "namedElements")) { transitive = false }
	shadowBundle(project(path: ":platforms:common", configuration: "transformProductionQuilt")) { transitive = false }

	common(project(path: ":platforms:textile", configuration: "namedElements")) { transitive = false }
	shadowBundle(project(path: ":platforms:textile", configuration: "transformProductionQuilt")) { transitive = false }
}

shadowJar {
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowBundle]
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":platforms:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

var modVersion = project.property("mod_version").toString()

publishMods {
	version = modVersion
	displayName = "v${modVersion}"

	type = modVersion.contains("-") ? ReleaseType.BETA : ReleaseType.STABLE;
	modLoaders.addAll(project.property("supported_platforms").toString().split(","))

	changelog = file(rootDir.toPath().resolve("changelog.txt")).text
	file = tasks.withType(RemapJarTask).named("remapJar").get().archiveFile
	additionalFiles.from(tasks.withType(Jar).named("sourcesJar").get().archiveFile)

	curseforge {
		accessToken = providers.environmentVariable("CURSEFORGE_SECRET")
		projectId = "335493"

		minecraftVersionRange {
			start = project.property("minecraft_version_min").toString()
			end = project.property("minecraft_version_max").toString()
		}

		clientRequired = true
		serverRequired = false

		// requires("qsl")
		requires("fabric-api")
		optional("cloth-config", "modmenu")
	}

	modrinth {
		accessToken = providers.environmentVariable("MODRINTH_SECRET")
		projectId = "LQ3K71Q1"

		minecraftVersionRange {
			start = project.property("minecraft_version_min").toString()
			end = project.property("minecraft_version_max").toString()
		}

		// requires("qsl")
		requires("fabric-api")
		optional("cloth-config", "modmenu")
	}
}
