plugins {
	alias libs.plugins.shadow
}

architectury {
	platformSetupLoomIde()
	neoForge()
}

loom {
	accessWidenerPath = project(":platforms:common").loom.accessWidenerPath
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

repositories {
	maven {
		name = 'NeoForged'
		url = 'https://maven.neoforged.net/releases'
	}
}

dependencies {
	neoForge libs.neoforge

	include(libs.battery)

	common(project(path: ":platforms:common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":platforms:common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
	inputs.property "version", rootProject.mod_version

	filesMatching("META-INF/neoforge.mods.toml") {
		expand "version": rootProject.mod_version
	}
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	exclude "assets/textures/dynamic_fps/icon.png"

	// Sue me
	// Fixes crash in prod from our GameRenderer mixin
	// Idk anything about NeoForge, if you do explain.
	exclude "dynamic-fps-platforms_common-refmap.json"

	configurations = [project.configurations.shadowCommon]
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar

	injectAccessWidener.set(true)
	atAccessWideners.add("dynamic_fps.accesswidener")
}

sourcesJar {
	def commonSources = project(":platforms:common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.archives_base_name + "-" + project.name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
	}
}
